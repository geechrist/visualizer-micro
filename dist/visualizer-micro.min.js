(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.VisualizerMicro = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var VisualizerMicro;!function(){var e,i,t,a,o,r,d,n,s,u,l=window.AudioContext||window.webkitAudioContext,h="VisualizerMicro: ",c="canplaythrough";VisualizerMicro=function(){return r()?(this.alreadyLoaded=!1,this.context=new l,this.analyser=this.context.createAnalyser(),this.binCount=!1,this.loadEventListenerCreated=!1,this.loadedCallback=!1,this.audioSource=!1,this.dataArray=[],void(this.volumeModifier=1)):void e()},e=function(){console.warn(h+"Audio visualization is not supported in this browser.")},i=function(){console.warn(h+"An audio source must be loaded using load() before audio data can be retrieved.")},t=function(){if(!this.alreadyLoaded){var e=this.context.createMediaElementSource(this.audioSource);e.connect(this.analyser),this.analyser.connect(this.context.destination),this.binCount=this.analyser.frequencyBinCount,this.dataArray=new Uint8Array(this.binCount),this.setVolumeModifier(this.audioSource.volume),this.alreadyLoaded=!0,this.loadedCallback()}},a=function(i,a){return r()?i?a?this.audioSource===i?void console.log(h+"This audio source has already been loaded, no need to call load() with it again."):(this.loadEventListenerCreated&&this.alreadyLoaded&&o(),this.audioSource=i,this.loadEventListenerCreated=!0,this.loadedCallback=a,void this.audioSource.addEventListener(c,t.bind(this))):void console.warn(h+"A callback must be supplied to load()."):void console.warn(h+"An audio source must be supplied to load()."):void e()},o=function(){this.audioSource?this.audioSource.removeEventListener(c,t):console.log(h+"Audio source doesn't exist. This may mean it was destroyed prematurely and could cause a memory leak."),this.alreadyLoaded=!1,this.loadedCallback=!1,this.loadEventListenerCreated=!1},r=function(){return!!l},d=function(){if(!r())return void e();if(!this.alreadyLoaded)return void i();var t,a,o=[];this.analyser.getByteFrequencyData(this.dataArray),t=this.dataArray.length;for(var d=0;d<t;d++)a=this.dataArray[d],a=a/this.volumeModifier/255,o.push(a);return o},n=function(){if(!r())return void e();if(!this.alreadyLoaded)return void i();var t,a,o=[];this.analyser.getByteTimeDomainData(this.dataArray),t=this.dataArray.length;for(var d=0;d<t;d++)a=this.dataArray[d],a-=128,a/=128,o.push(a);return o},s=function(e){this.volumeModifier=e},u=VisualizerMicro.prototype,u._onLoad=t,u.load=a,u.unload=o,u.isSupported=r,u.getSpectrum=d,u.getWaveform=n,u.setVolumeModifier=s}(),module.exports=VisualizerMicro;
},{}]},{},[1])(1)
});